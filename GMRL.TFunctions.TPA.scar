unit GMRL.TFunctions.TPA;

interface

  function TPAFastSort(const TPA: TPointArray;const Dists: TIntArray; maxDist: Integer; CloseFirst: Boolean): TPointArray;
  function TPAtoATPA(const TPA: TPointArray; Dist: Integer): T2DPointArray;
  function TPAtoATPAEx(const TPA: TPointArray; w, h: Integer): T2DPointArray;
  function TPAReArrangeandDist(const a: TPointArray; Dist: Integer): TPointArray;
  function TPAReArrangeandEx(const a: TPointArray; w, h: Integer): TPointArray;
  function TPAContainsDist(const P: TPoint; Dist:Integer; a: TPointArray): Boolean;
  function TPAContainsEx(const P: TPoint; w, h:Integer; a: TPointArray): Boolean;
  function TPAMiddleEx(const TPA: TPointArray; var x, y: Integer): Boolean; 
  function TPAMiddle(const tpa: TPointArray): TPoint;    
  function TPACombine(const Ar1, Ar2: TPointArray): TPointArray; 
  function TPASplit(const arr: TPointArray; Dist: Integer): T2DPointArray; 
  function TPASplitEx(const arr: TPointArray; w, h: Integer): T2DPointArray;  
  function TPAPosNext(const Find: TPoint; const V: TPointArray; const PrevPos: Integer; const IsSortedAscending: Boolean): Integer;
  function TPABounds(a: TPointArray): TBox;
  procedure TPASortColumns(var a: TPointArray; const LowToHi: Boolean);
  procedure TPASortRows(var a: TPointArray; const LowToHi: Boolean);
  procedure TPAQuickSort(var A: TIntArray; var B: TPointArray; iLo, iHi: Integer; SortUp: Boolean);
  procedure TPABoxDist(var a: TPointArray; const Dist: Integer);
  procedure TPABoxEx(var a: TPointArray; const w, h: Integer);
  procedure TPASwap(var a, b: TPointArray);
  procedure TSwap(var a, b: TPoint);
  procedure TPASortFrom(var a: TPointArray; const From: TPoint);
  procedure TPAReverse(var a: TPointArray);  
  procedure TPAAppend(var V: TPointArray; const R: TPoint);
  procedure TPAFilterPointsPie(var Points: TPointArray; const SD, ED, MinR, MaxR: float; Mx, My: Integer; Natural: Boolean);
  procedure TPAFilterPointsDist(var Points: TPointArray; const MinDist, MaxDist: float; Mx, My: Integer); 
  procedure TPAFilterLine(var Points: TPointArray; Radial: float; Radius, MX, MY: Integer); 
  procedure TPAFilterDist(var TPA: TPointArray; maxDist: integer);

implementation
  uses GMRL.Core.Math, GMRL.Core.Types; 

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TPAFastSort(const TPA: TPointArray;const Dists: TIntArray; maxDist: Integer; CloseFirst: Boolean): TPointArray;
Contributors: ShadowRecon.
Description: Very Fast TPA Sort, uses an adepted CountSort algorithm.
Date Created: June 3rd, 2013. By ShadowRecon.
Last Modified: June 3rd, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TPAFastSort(const TPA: TPointArray;const Dists: TIntArray; maxDist: Integer; CloseFirst: Boolean): TPointArray;
Var
   Oc, D: TIntArray;
   I, H, J: Integer;
   ind: array of array of integer;
Begin
  Oc.SetLength(maxDist + 1); 
  H := High(Dists); 
  For I := 0 To H Do
    Oc[Dists[I]] := Oc[Dists[I]] + 1;

  D.SetLength(maxDist + 1);
  ind.SetLength(maxDist + 1);
  For I := 0 To maxDist Do 
    ind[i].SetLength(Oc[i] + 1);
  For I := 0 To H Do
  Begin
    ind[Dists[I]][D[Dists[I]]] := I;
    D[Dists[i]] := D[Dists[i]] + 1;
  End;

  Result.SetLength(H + 1);
  H := 0;

  If CloseFirst Then
  Begin
    For I := 0 To maxDist Do 
      For J := 0 To oC[I] - 1 Do
      Begin
        Result[H] := TPA[ind[I][J]];
        H := H + 1;
      End;
  End
  Else
    For I := maxDist Downto 0 Do 
      For J := 0 To oC[I] - 1 Do
      Begin
        Result[H] := TPA[ind[I][J]];
        H := H + 1;
      End;
End;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TSwap(var a, b: TPoint);
Contributors: ShadowRecon.
Description: Swaps Points.
Date Created: June 3rd, 2013. By ShadowRecon.
Last Modified: June 3rd, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TSwap(var a, b: TPoint);
var
   c: TPoint;
begin
  c := a;
  a := b;
  b := c;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TPASwap(var a, b: TPointArray);
Contributors: ShadowRecon.
Description: Swaps TPointArrays.
Date Created: June 3rd, 2013. By ShadowRecon.
Last Modified: June 3rd, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TPASwap(var a, b: TPointArray);
var
   c: TPointArray;
begin
  c := a;
  a := b;
  b := c;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TPABoxEx(var a: TPointArray; const w, h: Integer);
Contributors: ShadowRecon.
Description: Leaves one point per box with side lengths W and H to the TPA.
Date Created: June 3rd, 2013. By ShadowRecon.
Last Modified: June 3rd, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TPABoxEx(var a: TPointArray; const w, h: Integer);
var
   i, c, NoTP, l: Integer;
   t: TPoint;
   Found : boolean;
begin
  NoTP := 0;
  l := High(a);
  for i := 0 to l do
  begin
    Found := false;
    for c := 0 to NoTP - 1 do
      if (Abs(a[i].x - a[c].x) <= w) and (Abs(a[i].y - a[c].y) <= h) then
      begin
        Found := true;
        Break;
      end;
    if not Found then
//    if (c >= NoTP) then
    begin
      t := a[i];
      a[i] := a[NoTP];
      a[NoTP] := t;
      Inc(NoTP);
    end;
  end;
  a.SetLength(NoTP);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TPABoxDist(var a: TPointArray; const Dist: Integer);
Contributors: ShadowRecon.
Description: Leaves one point per box with the side length Dist.
Date Created: June 3rd, 2013. By ShadowRecon.
Last Modified: June 3rd, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TPABoxDist(var a: TPointArray; const Dist: Integer);
var
   i, c, NoTP, l: Integer;
   t: TPoint;
   Found : boolean;
begin
  NoTP := 0;
  l := High(a);
  for i := 0 to l do
  begin
    Found := false;
    for c := 0 to NoTP - 1 do
      if (Round(sqrt(Sqr(a[i].x - a[c].x) + Sqr(a[i].y - a[c].y))) <= Dist) then
      begin
        Found := True;
        Break;
      end;
    if not Found then
//    if (c >= NoTP) then
    begin
      t := a[i];
      a[i] := a[NoTP];
      a[NoTP] := t;
      Inc(NoTP);
    end;
  end;
  a.SetLength(NoTP);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TPAContainsEx(const P: TPoint; w, h:Integer; a: TPointArray): Boolean;
Contributors: ShadowRecon.
Description: Returns true if the point P is near a point in the TPA a with the max X and Y distances W and H.
Date Created: June 3rd, 2013. By ShadowRecon.
Last Modified: June 3rd, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TPAContainsEx(const P: TPoint; w, h:Integer; a: TPointArray): Boolean;
var
  i, l: Integer;
begin
  Result := False;
  l := High(a);
  for i := 0 to l do
    if (Abs(P.x - a[i].x) <= w) and (Abs(P.y - a[i].y) <= h) then
    begin
      Result := True;
      Exit;
    end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TPAContainsDist(const P: TPoint; Dist:Integer; a: TPointArray): Boolean;
Contributors: ShadowRecon.
Description: Returns true if the point P is near a point in the TPA a with the max distance Dist.
Date Created: June 3rd, 2013. By ShadowRecon.
Last Modified: June 3rd, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TPAContainsDist(const P: TPoint; Dist:Integer; a: TPointArray): Boolean;
var
  i, l: Integer;
begin
  Result := False;
  l := High(a);
  for i := 0 to l do
    if (Round(sqrt(Sqr(P.x - a[i].x) + Sqr(P.y - a[i].y))) <= Dist) then
    begin
      Result := True;
      Exit;
    end;
end; 

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TPAReArrangeandEx(const a: TPointArray; w, h: Integer): TPointArray;
Contributors: ShadowRecon.
Description: Results the TPointArray a with one point per box with side lengths W and H left.
Date Created: June 3rd, 2013. By ShadowRecon.
Last Modified: June 3rd, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TPAReArrangeandEx(const a: TPointArray; w, h: Integer): TPointArray;
var
  i, t, c, l: Integer;
  Found: Boolean;
begin
  l := High(a);
  c := 0;
  Result.SetLength(l + 1);
  for i := 0 to l do
  begin
    Found := False;
    for t := 0 to c -1 do
      if (Abs(Result[t].x - a[i].x) <= w) and (Abs(Result[t].y - a[i].y) <= h) then
      begin
        Found := True;
        Break;
      end;
    if not Found then
    begin
      Result[c] := a[i];
      Inc(c);
    end;
  end;
  Result.SetLength(c);
end;  

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TPAReArrangeandDist(const a: TPointArray; Dist: Integer): TPointArray;
Contributors: ShadowRecon.
Description: Results the TPointArray a with one point per box with side length Dist left. 
Date Created: June 3rd, 2013. By ShadowRecon.
Last Modified: June 3rd, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TPAReArrangeandDist(const a: TPointArray; Dist: Integer): TPointArray;
var
  i, t, c, l: Integer;
  Found: Boolean;
begin
  l := High(a);
  c := 0;
  Result.SetLength(l + 1);
  for i := 0 to l do
  begin
    Found := False;
    for t := 0 to c -1 do
      if (Round(sqrt(Sqr(Result[t].x - a[i].x) + Sqr(Result[t].y - a[i].y))) <= Dist) then
      begin
        Found := True;
        Break;
      end;
    if not found then
    begin
      Result[c] := a[i];
      Inc(c);
    end;
  end;
  Result.SetLength(c);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TPAtoATPAEx(const TPA: TPointArray; w, h: Integer): T2DPointArray;
Contributors: ShadowRecon.
Description: Splits the TPA to boxes with sidelengths W and H and results them as a T2DPointArray.
Date Created: June 3rd, 2013. By ShadowRecon.
Last Modified: June 3rd, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TPAtoATPAEx(const TPA: TPointArray; w, h: Integer): T2DPointArray;
var
   a, b, c, l: Integer;
   Found: Boolean;
begin
  Result.SetLength(0);
  l := High(TPA);
  c := 0;
  for a := 0 to l do
  begin
    Found := false;
    for b := 0 to c -1 do
      if (Abs(TPA[a].X - Result[b][0].X) <= w) and (Abs(TPA[a].Y - Result[b][0].Y) <= h) then
      begin
        Found := True;
        Break;
      end;
    if Found then
    begin
      Result[b].SetLength(Length(Result[b]) + 1);
      Result[b][High(Result[b])] := TPA[a];
    end else
    begin
      Result.SetLength(c + 1);
      Result[c].SetLength(1);
      Result[c][0] := TPA[a];
      Inc(c);
    end;
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TPAtoATPA(const TPA: TPointArray; Dist: Integer): T2DPointArray;
Contributors: ShadowRecon.
Description: Splits the TPA to boxes with sidelength Dist and results them as a T2DPointArray.
Date Created: June 3rd, 2013. By ShadowRecon.
Last Modified: June 3rd, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TPAtoATPA(const TPA: TPointArray; Dist: Integer): T2DPointArray;
var
   a, b, c, l: Integer;
   Found: Boolean;
begin
  Result.SetLength(0);
  l := High(tpa);
  c := 0;
  for a := 0 to l do
  begin
    Found := false;
    for b := 0 to c -1 do
      if (Round(sqrt(Sqr(TPA[a].X - Result[b][0].X) + Sqr(TPA[a].Y - Result[b][0].Y))) <= Dist) then
      begin
        Found := True;
        Break;
      end;
    if Found then
    begin
      Result[b].SetLength(Length(Result[b]) + 1);
      Result[b][High(Result[b])] := TPA[a];
    end else
    begin
      Result.SetLength(c + 1);
      Result[c].SetLength(1);
      Result[c][0] := TPA[a];
      Inc(c);
    end;
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TPAQuickSort(var A: TIntArray; var B: TPointArray; iLo, iHi: Integer; SortUp: Boolean);
Contributors: ShadowRecon.
Description: Sorts TPA using QuickSort Algo.
Date Created: June 3rd, 2013. By ShadowRecon.
Last Modified: June 3rd, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TPAQuickSort(var A: TIntArray; var B: TPointArray; iLo, iHi: Integer; SortUp: Boolean);
var
  Lo, Hi, Mid, T: Integer;
  TP: TPoint;
begin
  if (Length(A) <> Length(B)) then Exit;
  Lo := iLo;
  Hi := iHi;
  Mid := A[(Lo + Hi) shr 1];
  repeat
    if SortUp then
    begin
      while (A[Lo] < Mid) do Inc(Lo);
      while (A[Hi] > Mid) do Dec(Hi);
    end else
    begin
      while (A[Lo] > Mid) do Inc(Lo);
      while (A[Hi] < Mid) do Dec(Hi);
    end;
    if (Lo <= Hi) then
    begin
      T := A[Lo];
      A[Lo] := A[Hi];
      A[Hi] := T;
      TP := B[Lo];
      B[Lo] := B[Hi];
      B[Hi] := TP;
      Inc(Lo);
      Dec(Hi);
    end;
  until Lo > Hi;
  if (Hi > iLo) then TPAQuickSort(A, B, iLo, Hi, SortUp);
  if (Lo < iHi) then TPAQuickSort(A, B, Lo, iHi, SortUp);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TPASortRows(var a: TPointArray; const LowToHi: Boolean);
Contributors: ShadowRecon.
Description: Sorts TPA by columns or X values
Date Created: June 3rd, 2013. By ShadowRecon.
Last Modified: June 3rd, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TPASortRows(var a: TPointArray; const LowToHi: Boolean);
var
   i, l: Integer;
   Arr: TIntArray;
begin
  l := High(a);
  if (l < 0) then Exit;
  Arr.SetLength(l + 1);
  for i := 0 to l do
    Arr[i] := a[i].x;
  TPAQuickSort(arr, a, 0, l, LowToHi);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TPASortColumns(var a: TPointArray; const LowToHi: Boolean);
Contributors: ShadowRecon.
Description: Sorts TPA by columns or Y values
Date Created: June 3rd, 2013. By ShadowRecon.
Last Modified: June 3rd, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TPASortColumns(var a: TPointArray; const LowToHi: Boolean);
var
   i, l: Integer;
   Arr: TIntArray;
begin
  l := High(a);
  if (l < 0) then Exit;
  Arr.SetLength(l + 1);
  for i := 0 to l do
    Arr[i] := a[i].y;
  TPAQuickSort(arr, a, 0, l, LowToHi);
end; 

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TPASortFrom(var a: TPointArray; const From: TPoint);
Contributors: ShadowRecon.
Description: Sorts the TPointArray a from the point From closest one to the point is [0], second closest is [1] etc.
Date Created: June 3rd, 2013. By ShadowRecon.
Last Modified: June 3rd, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TPASortFrom(var a: TPointArray; const From: TPoint);
var
   i, l: Integer;
   DistArr: TIntArray;
begin
  l := High(a);
  if (l < 0) then Exit;
  DistArr.SetLength(l + 1);
  for i := 0 to l do
    DistArr[i] := Round(Sqr(From.x - a[i].x) + Sqr(From.y - a[i].y));
  TPAQuickSort(DistArr, a, 0, l, True);
end;


{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TPAMiddleEx(const TPA: TPointArray; var x, y: Integer): Boolean;
Contributors: ShadowRecon.
Description: Stores the coordinates of the middle of the TPointArray a to X and Y.
Date Created: June 3rd, 2013. By ShadowRecon.
Last Modified: June 3rd, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TPAMiddleEx(const TPA: TPointArray; var x, y: Integer): Boolean;
var
   i, l: Integer;
begin
  Result := False;
  l := High(tpa);
  if (l < 0) then Exit;
  x := 0;
  y := 0;
  for i := 0 to l do
  begin
    x := x + tpa[i].x;
    y := y + tpa[i].y;
  end;
  x := x div (l + 1);
  y := y div (l + 1);
  Result := True;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TPAMiddle(const tpa: TPointArray): TPoint;
Contributors: ShadowRecon.
Description: Returns the middle of the TPointArray tpa.
Date Created: June 3rd, 2013. By ShadowRecon.
Last Modified: June 3rd, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TPAMiddle(const tpa: TPointArray): TPoint;
var
   i, l: Integer;
begin
  l := High(tpa);
  if (l < 0) then Exit;
  Result.x := 0;
  Result.y := 0;
  for i := 0 to l do
  begin
    Result.x := Result.x + tpa[i].x;
    Result.y := Result.y + tpa[i].y;
  end;
  Result.x := Result.x div (l + 1);
  Result.y := Result.y div (l + 1);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TPAReverse(var a: TPointArray);
Contributors: ShadowRecon.
Description: Inverts / Reverses the TPointArray a.
Date Created: June 3rd, 2013. By ShadowRecon.
Last Modified: June 3rd, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TPAReverse(var a: TPointArray);
var
   i, l: Integer;
   b: tpointarray;
begin
  l := High(a);
  if (l < 0) then Exit;
  b := a;
  for i := l downto 0 Do
    a[l - i] := b[i];
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TPACombine(const Ar1, Ar2: TPointArray): TPointArray;
Contributors: ShadowRecon.
Description: Combines the TPointArrays Ar1 and Ar2, and results the combination.
Date Created: June 3rd, 2013. By ShadowRecon.
Last Modified: June 3rd, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TPACombine(const Ar1, Ar2: TPointArray): TPointArray;
var
  i, l1, l2: Integer;
begin
  Result := Ar1;
  l1 := Length(Result);
  l2 := Length(Ar2);
  Result.SetLength(l1 + l2);
  for i := 0 to l2 -1 do
    Result[i + l1] := Ar2[i];
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TPASplit(const arr: TPointArray; Dist: Integer): T2DPointArray;
Contributors: ShadowRecon.
Description: Splits the points with max distance Dist to their own TPointArrays.
Dist 1 puts the points that are next to eachother to their own arrays.
Date Created: June 3rd, 2013. By ShadowRecon.
Last Modified: June 3rd, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TPASplit(const arr: TPointArray; Dist: Integer): T2DPointArray;
var
  t1, t2, c, ec, tc, l: Integer;
  tpa: TPointArray;
begin
  tpa := arr;
  l := High(tpa);
  if (l < 0) then Exit;
  Result.SetLength(l + 1);
  c := 0;
  ec := 0;
  while ((l - ec) >= 0) do
  begin
    Result[c].SetLength(1);
    Result[c][0] := tpa[0];
    tpa[0] := tpa[l - ec];
    Inc(ec);
    tc := 1;
    t1 := 0;
    while (t1 < tc) do
    begin
      t2 := 0;
      while (t2 <= (l - ec)) do
      begin
        if (Round(sqrt(Sqr(Result[c][t1].x - tpa[t2].x) + Sqr(Result[c][t1].y - tpa[t2].y))) <= Dist) then
        begin
          Result[c].SetLength(tc +1);
          Result[c][tc] := tpa[t2];
          tpa[t2] := tpa[l - ec];
          Inc(ec);
          Inc(tc);
          Dec(t2);
        end;
        Inc(t2);
      end;
      Inc(t1);
    end;
    Inc(c);
  end;
  Result.SetLength(c);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TPASplitEx(const arr: TPointArray; w, h: Integer): T2DPointArray;
Contributors: ShadowRecon.
Description: Splits the points with max X and Y distances W and H to their own TPointArrays. 
Date Created: June 3rd, 2013. By ShadowRecon.
Last Modified: June 3rd, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=} 

function TPASplitEx(const arr: TPointArray; w, h: Integer): T2DPointArray;
var
  t1, t2, c, ec, tc, l: Integer;
  tpa: TPointArray;
begin
  tpa := arr;
  l := High(tpa);
  if (l < 0) then Exit;
  Result.SetLength(l + 1);
  c := 0;
  ec := 0;
  while ((l - ec) >= 0) do
  begin
    Result[c].SetLength(1);
    Result[c][0] := tpa[0];
    tpa[0] := tpa[l - ec];
    Inc(ec);
    tc := 1;
    t1 := 0;
    while (t1 < tc) do
    begin
      t2 := 0;
      while (t2 <= (l - ec)) do
      begin
        if (Abs(Result[c][t1].x - tpa[t2].x) <= w) and (Abs(Result[c][t1].y - tpa[t2].y) <= h) then
        begin
          Result[c].SetLength(tc + 1);
          Result[c][tc] := tpa[t2];
          tpa[t2] := tpa[l - ec];
          Inc(ec);
          Inc(tc);
          Dec(t2);
        end;
        Inc(t2);
      end;
      Inc(t1);
    end;
    Inc(c);
  end;
  Result.SetLength(c);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TPAPosNext(const Find: TPoint; const V: TPointArray; const PrevPos: Integer; const IsSortedAscending: Boolean): Integer;
Contributors: ShadowRecon.
Description: 
Date Created: June 3rd, 2013. By ShadowRecon.
Last Modified: June 3rd, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TPAPosNext(const Find: TPoint; const V: TPointArray; const PrevPos: Integer; const IsSortedAscending: Boolean): Integer;
var I, L, H : Integer;
    D       : Tpoint;
begin
  if IsSortedAscending then // binary search
    begin
      if Max(PrevPos + 1, 0) = 0 then // find first
        begin
          L := 0;
          H := Length(V) - 1;
          while L <= H do
            begin
              I := (L + H) div 2;
              D := V[I];
              if Find = D then
                begin
                  while (I > 0) and (V[I - 1] = Find) do
                    Dec(I);
                  Result := I;
                  exit;
                end else
              if ((D.x > Find.x) and (D.y > Find.y)) then
                H := I - 1
              else
                L := I + 1;
            end;
          Result := -1;
        end
      else // find next
        if PrevPos >= Length(V) - 1 then
          Result := -1
        else
          if V[PrevPos + 1] = Find then
            Result := PrevPos + 1
          else
            Result := -1;
    end
  else
    begin // linear search
      for I := Max(PrevPos + 1, 0) to Length(V) - 1 do
        if V[I] = Find then
          begin
            Result := I;
            exit;
          end;
      Result := -1;
    end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TPAAppend(var V: TPointArray; const R: TPoint);
Contributors: ShadowRecon.
Description: Adds a point to the end of an array;
Date Created: June 5th, 2013. By ShadowRecon.
Last Modified: June 5th, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}         

procedure TPAAppend(var V: TPointArray; const R: TPoint);
begin
  v.Add(R);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TPAFilterPointsPie(var Points: TPointArray; const SD, ED, MinR, MaxR: float; Mx, My: Integer; Natural: Boolean);
Contributors: ShadowRecon.
Description:
  Removes the points in the TPointArray Points that are not within the degrees
  SD (StartDegree) and ED (EndDegree) and the distances MinR (MinRadius) and
  MaxR (MaxRadius) from the origin (Mx, My).
 
  Setting Natural to true changes the behavior.
  It allows specification of both clockwise and counterclockwise radials.
  This means that -10, 10 will produce the same pie as 10, -10, -180, 90 will
  produce the same pie as 180, 450, and 180, 90 will produce the same
  pie as 90, 180, etc.      
  
Date Created: June 5th, 2013. By ShadowRecon.
Last Modified: June 5th, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}  

procedure TPAFilterPointsPie(var Points: TPointArray; const SD, ED, MinR, MaxR: float; Mx, My: Integer; Natural: Boolean);
var
  BminusAx, BminusAy, CminusAx, CminusAy: float; //don't let the type deceive you. They are vectors!
  G: TPointArray;
  I, L, T: Integer;
  StartD, EndD: float;
  Over180, Ccw: Boolean;
begin
  T := High(Points);
  if (T < 0) then Exit;
  G.SetLength(T + 1);
  L := 0;

  Ccw := SD > ED; // See if we want to go counterclockwise

  StartD := SD;    //I still think this can be done more efficient, a while loop... Come on
  EndD := ED;
  while StartD > 360.0 do
    StartD := StartD - 360.0;
  while EndD > 360.0 do
    EndD := EndD - 360.0;
  while StartD < 0.0 do
    StartD := StartD + 360.0;
  while EndD < 0.0 do
    EndD := EndD + 360.0;


  if StartD <> EndD then // if StartD = EndD, then we have a circle...
  begin
    if natural then
    begin
         if Ccw then SwapE(StartD, EndD);
         if StartD > EndD then EndD := EndD + 360;
    end;

    Over180 := (Max(StartD, EndD) - Min(StartD, EndD)) > 180;

    if Over180 then
    begin
      StartD := StartD + 180;
      EndD   := EndD   + 180;
    end;

    //a is the midPoint, B is the left limit line, C is the right Limit Line, X the point we are checking
    BminusAx := cos(degtorad(StartD - 90));      //creating the two unit vectors
    BminusAy := sin(degtorad(StartD - 90));      //I use -90 or else it will start at the right side instead of top

    CminusAx := cos(degtorad(EndD - 90));
    CminusAy := sin(degtorad(EndD - 90));

    for I := 0 to T do
    begin
      if (not(((BminusAx * (Points[i].y - MY)) - (BminusAy * (Points[i].x - MY)) > 0) and
         ((CminusAx * (Points[i].y - MY)) - (CminusAy * (Points[i].x - MY)) < 0)) xor Over180) then
        continue;
      G[L] := Points[I];
      Inc(L);
    end;
    Points.SetLength(L);
    Points := G;
  end;
  TPAFilterPointsDist(Points, MinR, MaxR, Mx, My);   //TODO: move this to the MMLAddon section, this doesn't belong in FilterPointsPie
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TPAFilterPointsDist(var Points: TPointArray; const MinDist, MaxDist: float; Mx, My: Integer);
Contributors: ShadowRecon.
Description: Removes the points that don't have a dist between mindist/maxdist with (mx,my)
Date Created: June 5th, 2013. By ShadowRecon.
Last Modified: June 5th, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}  

procedure TPAFilterPointsDist(var Points: TPointArray; const MinDist, MaxDist: float; Mx, My: Integer);
var
  c,i,l : integer;
  d : float;
  mind,maxd : float;
begin
  l := high(points);
  c := 0;
  mind := sqr(mindist);
  maxd := sqr(maxdist);
  for i := 0 to l do
  begin
    d := sqr(Points[i].x - mx) + sqr(points[i].y - my);
    if (d >= mind) and (d <= maxd) then
    begin
      points[c] := points[i];
      inc(c);
    end;
  end;
  points.setlength(c);  
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure FilterPointsLine(var Points: TPointArray; Radial: float; Radius, MX, MY: Integer);
Contributors: ShadowRecon.
Description: 
Date Created: June 5th, 2013. By ShadowRecon.
Last Modified: June 5th, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}  

procedure TPAFilterLine(var Points: TPointArray; Radial: float; Radius, MX, MY: Integer);
var
  I, Hi, Ind, y: Integer;
  P: TPointArray;
  Box: TBox;
  B: T2DBoolArray;
  SinAngle,CosAngle : float;
begin
  if Length(Points) < 1 then
    Exit;
  Ind := 0;
  Box:= TPABounds(Points);
  SinAngle := sin(Radial);
  CosAngle := cos(Radial);
  B.SetLength(max(Box.x2, Round(SinAngle * Radius + MX)) + 1);
  y:= max(Box.x2, -Round(CosAngle * Radius) + MY);
  for I:= 0 to High(B) do
  begin;
    B[I].SetLength(y + 1);
  end;
  Hi:= High(Points);
  for I:= 0 to Hi do
    B[Points[I].x][Points[I].y]:= True;
  P.SetLength(Hi + 1);
  for I:= 0 to Radius do
  begin
    if(B[Round(SinAngle * I) + MX][-Round(CosAngle * I) + MY])then
    begin
      P[Ind].X := Round(SinAngle * I) + MX;
      P[Ind].Y := -Round(CosAngle * I) + MY;
      inc(Ind);
    end;
  end;
  P.SetLength(Ind);
  Points:= P;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 function TPABounds(a: TPointArray): TBox;
Contributors: ShadowRecon.
Description: Returns the bounds of a TPA.
Date Created: June 5th, 2013. By ShadowRecon.
Last Modified: June 5th, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}  

function TPABounds(a: TPointArray): TBox;
begin
  Result := Box(-1, -1, -1, -1);
    
  for var I := 0 to High(a) do
  begin  
    var curP := Point(a[I].X, a[I].Y); 
        
    if (Result.X1 > curP.X)  or (Result.X1 = -1) then
      Result.X1 := curP.X; 
      
    if (Result.X2 < curP.X) or (Result.X2 = -1) then
      Result.X2 := curP.X; 
      
    if ((Result.Y1 > curP.Y) or (Result.Y1 = -1)) then
      Result.Y1 := curP.Y; 
      
    if ((Result.Y2 < curP.Y) or (Result.Y2 = -1)) then
      Result.Y2 := curP.Y; 
    
  end;   
  
end;
{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TPAFilterist(var TPA: TPointArray; maxDist: integer);
Contributors: ShadowRecon.
Description: Removes points in the TPA that are within maxDist of each other.
Date Created: June 5th, 2013. By ShadowRecon.
Last Modified: June 5th, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}  

procedure TPAFilterDist(var TPA: TPointArray; maxDist: integer);
var
  c, i, j, l, h, maxDistSq: integer;
  newTPA: TPointArray;
  inBadElements: TBoolArray;
begin
  h := high(TPA);
  l := (h + 1);
  maxDistSq := (maxDist * maxDist);

  inBadElements.setLength(l);
  newTPA.setLength(l);

  for i := 0 to h do
    inBadElements[i] := false;

  for i := 0 to (h - 1) do
  begin
    if (inBadElements[i]) then
      continue;

    for j := (i + 1) to h do
    begin
      if (inBadElements[j]) then
        continue;

     // simplified -> a^2 + b^2 <= c^2
     if (((TPA[i].x - TPA[j].x) * (TPA[i].x - TPA[j].x)) + ((TPA[i].y - TPA[j].y) * (TPA[i].y - TPA[j].y)) <= maxDistSq) then
       inBadElements[j] := true;
    end;
  end;

  c := 0;

  // set the new TPA
  for i := 0 to h do
    if (not inBadElements[i]) then
    begin
      newTPA[c] := TPA[i];
      inc(c);
    end;

  newTPA.setLength(c);
  TPA := newTPA;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Contributors: ShadowRecon.
Description: 
Date Created: June 5th, 2013. By ShadowRecon.
Last Modified: June 5th, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}  

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Contributors: ShadowRecon.
Description: 
Date Created: June 5th, 2013. By ShadowRecon.
Last Modified: June 5th, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}  

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Contributors: ShadowRecon.
Description: 
Date Created: June 5th, 2013. By ShadowRecon.
Last Modified: June 5th, 2013. By ShadowRecon.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}  
end.
