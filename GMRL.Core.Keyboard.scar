unit GMRL.Core.Keyboard;

interface

  const
    VK_LBUTTON = 1;
    VK_RBUTTON = 2;
    VK_CANCEL = 3;
    VK_MBUTTON = 4; 
    VK_XBUTTON1 = 5;
    VK_XBUTTON2 = 6;
    VK_BACK = 8;
    VK_TAB = 9;
    VK_CLEAR = 12;
    VK_RETURN = 13;
    VK_SHIFT = 16;
    VK_CONTROL = 17;
    VK_MENU = 18;
    VK_PAUSE = 19;
    VK_CAPITAL = 20;
    VK_KANA = 21;
    VK_HANGUL = 22;
    VK_JUNJA = 23;
    VK_FINAL = 24;
    VK_HANJA = 25;
    VK_KANJI = 26;  
    VK_ESCAPE = 27;
    VK_CONVERT = 28;
    VK_NONCONVERT = 29;
    VK_ACCEPT = 30;
    VK_MODECHANGE = 31;
    VK_SPACE = 32;
    VK_PRIOR = 33;
    VK_NEXT = 34;
    VK_END = 35;
    VK_HOME = 36;
    VK_LEFT = 37;
    VK_UP = 38;
    VK_RIGHT = 39;
    VK_DOWN = 40;
    VK_SELECT = 41;
    VK_PRINT = 42;
    VK_EXECUTE = 43;
    VK_SNAPSHOT = 44;
    VK_INSERT = 45;
    VK_DELETE = 46;
    VK_HELP = 47;
    VK_LWIN = 91;
    VK_RWIN = 92;
    VK_APPS = 93;
    VK_SLEEP = 95;
    VK_NUMPAD0 = 96;    
    VK_NUMPAD1 = 97;    
    VK_NUMPAD2 = 98; 
    VK_NUMPAD3 = 99; 
    VK_NUMPAD4 = 100; 
    VK_NUMPAD5 = 101; 
    VK_NUMPAD6 = 102; 
    VK_NUMPAD7 = 103; 
    VK_NUMPAD8 = 104; 
    VK_NUMPAD9 = 105;
    VK_MULTIPLY = 106;
    VK_ADD = 107;
    VK_SEPARATOR = 108;
    VK_SUBTRACT = 109;
    VK_DECIMAL = 110;
    VK_DIVIDE = 111;
    VK_F1 = 112;      
    VK_F2 = 113;
    VK_F3 = 114;
    VK_F4 = 115;
    VK_F5 = 116;
    VK_F6 = 117;
    VK_F7 = 118;
    VK_F8 = 119;
    VK_F9 = 120;  
    VK_F10 = 121;  
    VK_F11 = 122; 
    VK_F12 = 123; 
    VK_F13 = 124; 
    VK_F14 = 125; 
    VK_F15 = 126; 
    VK_F16 = 127; 
    VK_F17 = 128; 
    VK_F18 = 129; 
    VK_F19 = 130; 
    VK_F20 = 131;       
    VK_F21 = 132;
    VK_F22 = 133;
    VK_F23 = 134;
    VK_F24 = 135;
    VK_NUMLOCK = 144;
    VK_SCROLL = 145;
    VK_LSHIFT = 160;
    VK_RSHIFT = 161;
    VK_LCONTROL = 162;
    VK_RCONTROL = 163;
    VK_LMENU = 164;
    VK_RMENU = 165;
    VK_BROWSER_BACK = 166;
    VK_BROWSER_FORWARD = 167;
    VK_BROWSER_REFRESH = 168;
    VK_BROWSER_STOP = 169;
    VK_BROWSER_SEARCH = 170;
    VK_BROWSER_FAVORITES = 171;
    VK_BROWSER_HOME = 172;
    VK_VOLUME_MUTE = 173;
    VK_VOLUME_DOWN = 174;
    VK_VOLUME_UP = 175;
    VK_MEDIA_NEXT_TRACK = 176;
    VK_MEDIA_PREV_TRACK = 177;
    VK_MEDIA_STOP = 178;
    VK_MEDIA_PLAY_PAUSE = 179;
    VK_LAUNCH_MAIL = 180;
    VK_LAUNCH_MEDIA_SELECT = 181;
    VK_LAUNCH_APP1 = 182;
    VK_LAUNCH_APP2 = 183;

  function CharToVKey(Key: string): Integer; 
  procedure VKeyDown(VKey: Integer);     
  procedure VKeyUp(VKey: Integer); 
  procedure HoldVKey(VKey, MinTime, MaxTime: Integer);
  procedure PressVKey(VKey: Integer);  
  procedure PressVKeyEx(VKey, Interval: Integer);
  procedure KeyDown(Key: string);   
  procedure KeyUp(Key: string);   
  procedure PressKey(Key: string); 
  procedure PressKeyEx(Key: string; Interval: Integer); 
  procedure TypeTextEx(Str: string; UseNumpad, UseDelays: Boolean); 
  procedure TypeText(Str: string);  
  procedure TypeSendEx(Text: string; PressEnter: Boolean);  
  procedure TypeSend(Str: string);
  function GetKeyState(VKey: Integer): Boolean;
  function GetCurrentKeyState(VKey: Integer): Boolean;
  function GetToggleKeyState(VKey: Integer): Boolean;
        
implementation

uses
  Macro, GMRL.Core.Client, GMRL.Core.Timing;  
  
function CharToVKey(Key: string): Integer;
begin
  if Key.Length = 0 then
    raise Exception.Create('Invalid key character specified');
  Result := GetKeys(Key[1]).KeyCode;
end;

procedure VKeyDown(VKey: Integer);
begin
  GetClient.Target.KeyDown(VKey);
end;

procedure VKeyUp(VKey: Integer);
begin
  GetClient.Target.KeyUp(VKey);
end;

procedure HoldVKey(VKey, MinTime, MaxTime: Integer);
begin
  VKeyDown(VKey);
  WaitRR(MinTime, MaxTime);
  VKeyUp(VKey);
end;

procedure PressVKey(VKey: Integer);   
begin          
  GetClient.Target.PressKey(VKey);
end;

procedure PressVKeyEx(VKey, Interval: Integer);
begin              
  GetClient.Target.PressKey(VKey, Interval);
end;   

procedure KeyDown(Key: string);
begin
  GetClient.Target.KeyDown(Key);
end;

procedure KeyUp(Key: string);
begin
  GetClient.Target.KeyUp(Key);
end;

procedure PressKey(Key: string);   
begin          
  GetClient.Target.PressKey(Key);
end;

procedure PressKeyEx(Key: string; Interval: Integer);
begin              
  GetClient.Target.PressKey(Key, Interval);
end;

procedure TypeTextEx(Str: string; UseNumpad, UseDelays: Boolean);
begin
  if UseDelays then
    GetClient.Target.SendText(Str, UseNumpad)
  else
    GetClient.Target.SendText(Str, UseNumpad, 0, 0, 0, 0, 0, 0);
end;  

procedure TypeText(Str: string);
begin
  TypeTextEx(Str, False, True);
end;  

procedure TypeSendEx(Text: string; PressEnter: Boolean);
begin
  TypeTextEx(Text, True, True); 
  if (PressEnter) then
    TypeTextEx(Chr(13), True, True);
end;  

procedure TypeSend(Str: string);
begin
  TypeTextEx(Str, False, True);
end;       

function GetKeyState(VKey: Integer): Boolean;
begin
  Result := GetClient.Target.IsKeyDown(VKey, True);
end;

function GetCurrentKeyState(VKey: Integer): Boolean;
begin
  Result := GetClient.Target.IsKeyDown(VKey);
end;

function GetToggleKeyState(VKey: Integer): Boolean;
begin
  Result := GetClient.Target.IsKeyToggled(VKey);
end;

end.